/*17. Definir a estrutura cuja representação gráfica é dada a seguir, definir os campos com ostipos 
básicos necessários e implementar o que se pede.
a) Crie um vetor Cadastro com 5 elementos;
b) Permita ao usuário entrar com dados para preencher esses 5 cadastros;
c) Encontre a pessoa com maior idade entre os cadastrados;
d) Encontre as pessoas do sexo masculino;
e) Encontre as pessoas com sal ´ ario maior que 1000;
f) Imprima os dados da pessoa cuja identidade seja igual a um valor fornecido pelo
usuário.
*/

#include <stdio.h>

struct endereco {

    char rua[20];
    char estado[5];
    char bairro[20];
    char cidade[20];
    char cep[20];

};

struct cadastro {

    char nome[20];
    struct endereco Endereco;
    float salario;
    char identidade[20];
    char cpf[20];
    char estadocivil[20];
    char telefone[20];
    int idade;
    char sexo;

};

typedef struct cadastro cadastro;
typedef struct endereco endereco;

int main(){

    cadastro vet[5];
    int i, j = 1, maisvelho = 0, posicaovelho;
    char busca[20];

    for (i = 0; i < 5; i++){

        printf("\n");
        printf("Digite o nome da pessoa %d: ", j);
        setbuf(stdin, NULL);
        fgets(vet[i].nome, 20, stdin);
        printf("Digite o endereco da pessoa %d:\n", j);
        printf("Nome da rua: ");
        setbuf(stdin, NULL);
        fgets(vet[i].Endereco.rua, 20, stdin);
        printf("Estado: ");
        setbuf(stdin, NULL);
        fgets(vet[i].Endereco.estado, 20, stdin);
        printf("Bairro: ");
        setbuf(stdin, NULL);
        fgets(vet[i].Endereco.bairro, 20, stdin);
        printf("Cidade: ");
        setbuf(stdin, NULL);
        fgets(vet[i].Endereco.cidade, 20, stdin);
        printf("CEP: ");
        setbuf(stdin, NULL);
        fgets(vet[i].Endereco.cep, 20, stdin);
        printf("Digite o salario da pessoa %d: R$", j);
        scanf("%f", &vet[i].salario);
        printf("Digite a identidade da pessoa %d: ", j);
        setbuf(stdin, NULL);
        fgets(vet[i].identidade, 20, stdin);
        printf("Digite o CPF da pessoa %d: ", j);
        setbuf(stdin, NULL);
        fgets(vet[i].cpf, 20, stdin);
        printf("Digite o estado civil da pessoa %d: ", j);
        setbuf(stdin, NULL);
        fgets(vet[i].estadocivil, 20, stdin);
        printf("Digite o telefone da pessoa %d: ", j);
        setbuf(stdin, NULL);
        fgets(vet[i].telefone, 20, stdin);
        printf("Digite a idade da pessoa %d: ", j);
        scanf("%d", &vet[i].idade);
        printf("Digite o sexo da pessoa %d (M/F/O): ", j);
        scanf(" %c", &vet[i].sexo);
        j++;

    }
    
    for (i = 0; i < 5; i++){

        if(i == 0){

            maisvelho = vet[i].idade;
            posicaovelho = i;

        }
        else if(vet[i].idade > maisvelho){

            maisvelho = vet[i].idade;
            posicaovelho = i;

        }

    }
    
    printf("\n");
    printf("- Com %d anos, a pessoa mais velha eh %s", maisvelho, vet[posicaovelho].nome);
    printf("\n");
    printf("As pessoas do sexo masculino cadastradas sao:\n");

    for (i = 0; i < 5; i++){
        
        if(vet[i].sexo == 'M'){

            printf("- %s", vet[i].nome);

        }

    }

    printf("\n");
    printf("As pessoas com salario maior do que R$1000 cadastradas sao:\n");

    for (i = 0; i < 5; i++){

        if(vet[i].salario > 1000){

            printf("- R$%.2f, %s", vet[i].salario, vet[i].nome);

        }

    }

    printf("\n");
    printf("Digite a identidade da pessoa que deseja encontrar: ");
    setbuf(stdin, NULL);
    fgets(busca, 20, stdin);

    for (i = 0; i < 5; i++){

        if(strcmp(vet[i].identidade, busca) == 0){

            printf("\n");
            printf("A pessoa com a identidade correspondente eh: %s", vet[i].nome);

        }

    }

    return 0;
}